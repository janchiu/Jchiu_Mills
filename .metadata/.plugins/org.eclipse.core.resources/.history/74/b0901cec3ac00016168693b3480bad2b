



package fracCalc;

import java.util.Scanner;

public class FracCalc {

	

    public static void main(String[] args) 
    {
        // TODO: Read the input from the user and call produceAnswer with an equation
    		
    		Scanner newInput = new Scanner(System.in);
    		System.out.println("Please enter your input");
    		String input = newInput.nextLine();
    		if(input.equals("quit") != true){
    				String answer = produceAnswer(input);
    				System.out.println(answer);
    				System.out.println();
    				input = newInput.nextLine();
    		}
    		else {
    			newInput.close();
    		}
    	}

    // ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
    // This function takes a String 'input' and produces the result
    //
    // input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
    //      e.g. input ==> "1/2 + 3/4"
    //        
    // The function should return the result of the fraction after it has been calculated
    //      e.g. return ==> "1_1/4"
    public static String produceAnswer(String input)
    { 
        // TODO: Implement this function to produce the solution to the input
    	if(input.indexOf(' ') == -1){
    		return "incorrect input";
    	}
    	String [] splitTheSpaces = input.split(" ");
        // TODO: Implement this function to produce the solution to the input
    	String operand1= splitTheSpaces[0];
    	String operator= splitTheSpaces[1];
    	String operand2= splitTheSpaces[2];
    	
    	int[] placeholder1= parseOperands(operand1);
    	int[] placeholder2= parseOperands(operand2);
    	
    	
    	int[] answer = new int[2];
        if(operator.equals("+")){
        	
        	answer= addFrac((placeholder1),(placeholder2));
        } else 
        if(operator.equals("-")){
        	
        	answer = subtractFrac(placeholder1, placeholder2);
        }else 
        if(operator.equals("*")){
        
        	answer = multiplyFrac(placeholder1, placeholder2);
        }else{
      	
        	answer= divideFrac(placeholder1, placeholder2);
        		
        }

        return (answer[0] + "/" + answer[1]);
        
    }
    /*
    public static int gcf(int[] answer){
		//This method finds the greatest common factor between two numbers using a loop to calculate whether those two numbers are
			//divisible by another number
		 
		int ans= 1;
		if(answer[0]>0 && answer[1]>0){
			for(int i=1; i<=answer[0] || i<=answer[1]; i++){
				if ((answer[0]% i== 0) && (answer[1]% i ==0)) {
					ans= i;
				}
			}
		}
		else{
			for(int i=-1;i>=answer[0] || i>=answer[1]; i--){
				if ((answer[0] % i == 0) && (answer[1]% i ==0)) {
					ans= i;
				}
			}
		}
		return ans;
	}
    
   */
    /*
    public static int[] reduceFrac(int[] operand) {
    	
    	int [] simpleFrac = new int [3]; 
    	int wholeNum = operand[0]/operand[1];
    	operand[0] = (operand[0]%operand[1]);
    	if (wholeNum != 0) {
    	operand[0] = Math.abs(operand[0]);
    	}
   
    	int factor = gcf(operand);
    	int numerator = operand[0]/factor;
    	int denominator = Math.abs(operand[1]/factor); 
    			simpleFrac[0] = wholeNum; 
    			simpleFrac[1] = numerator;
    			simpleFrac[2] = denominator; 
    		return simpleFrac; 

    }
    
    */
    
    
    public static int[] parseOperands(String operand) {
    	
    	String[] checkForWholeNum = operand.split("_");
		String[] fraction = checkForWholeNum[checkForWholeNum.length-1].split("/");
		String[] threePartsOfOperand = new String[3];
		int underscore = operand.indexOf("_");
		int slash = operand.indexOf("/");
		threePartsOfOperand[2]="1";
		int[] operandInt = new int[3];
		if(underscore<0&&slash>=0){
			threePartsOfOperand[0]="0";
		}
		else {
			threePartsOfOperand[0]=checkForWholeNum[0];
		}
		if(slash<0){
			threePartsOfOperand[1]="0";
			threePartsOfOperand[2]="1";
		}
		else {
			threePartsOfOperand[1]=fraction[0];
			threePartsOfOperand[2]=fraction[1];
		}
		for(int i=0;i<threePartsOfOperand.length;i++){
			operandInt[i]=Integer.parseInt(threePartsOfOperand[i]);
		}
		if(operandInt[0]<0)
			operandInt[1]=operandInt[1]*-1;
		int[] improperFrac = toImproperFrac(operandInt[0], operandInt[1], operandInt[2]);
		return improperFrac;
	}
    /*
    public static int gcf(int a , int b){
    	while(a!=0 && b!= 0){
    		int c=b;
    		b= a%b;
    		a=c;
    	}
    	return Math.abs(a+b);
    }
 */
    /*
    public static int[] toImproperFrac(int[] operand) { // This method converts mixed number into an improper fraction //
    	int[] improp = new int[2]; 
    	if(operand[0]>0){
    		improp[0]=operand[2]*operand[0]+operand[1];
    	}
    	if(operand[0]<0){
    		improp[0]= operand[2]*operand[0]-operand[1];
    	}
    	if(operand[0]==0){
    		improp[0]= operand[1];
    	}
    	improp[1]=operand[2];
    	return improp;
    }
   */
    public static int[] toImproperFrac(int num1, int num2, int num3) {
		//This method makes a mixed number an improper fraction in array form
		int[] toImproperFrac=new int[2];
		toImproperFrac[0] = num1 * num3 + num2;
		toImproperFrac[1] = num3;
		return toImproperFrac;
    }
	public static int[] addFrac(int[] firstOperand, int[] secondOperand){
		int[] commonden= new int[1];
    	int[] numcombined= new int[1];
    	if(firstOperand[1]==secondOperand[1]){
    		commonden[0]=firstOperand[1];
    		numcombined[0]= firstOperand[0]+secondOperand[0];
    	}else{
    		commonden[0]=firstOperand[1]*secondOperand[1];
    		numcombined[0]= firstOperand[0]*secondOperand[1]+secondOperand[0]*firstOperand[1];
    		
    	}
    	int[] answer= new int[2];
    	answer[0]= numcombined[0];
    	answer[1]= commonden[0];
    	
    	return answer;

	}

    public static int[] subtractFrac(int[] firstOperand, int[] secondOperand) {
    	int[] answer = new int[2]; 
    	int[] array = new int[2]; 
		array[0] = (firstOperand[0]*secondOperand[1])- (firstOperand[1]*secondOperand[0]);	
		answer[0] = array[0];
		answer[1] = firstOperand[1]*secondOperand[1];
		return answer;
	}
    
    public static int[] multiplyFrac(int[] firstOperand, int[] secondOperand) {
    	int[] answer = new int[2]; 
    		answer[0] = (firstOperand[0] * secondOperand[0]);
    		answer[1] = (firstOperand[1] * secondOperand[1]); 
    		return answer;
    	}
    	
    public static int[] divideFrac(int[] firstOperand, int[] secondOperand) {
    	int[] commonDenominator = new int[1]; 
    	int[] numerator = new int[1]; 
    	int[] answer = new int[2]; 
    	numerator[0] = firstOperand[0] * secondOperand[1];
    	commonDenominator[0] = firstOperand[1]* secondOperand[0]; 
		answer[0] = numerator[0];
    	answer[1] = commonDenominator[0];
    		return answer;
    	}
 /*   public static String toMixedNum(int[] answer){
    	int[] reducedadd= new int[2];
    	int[] gcfaddnum= new int[1];	
    }
    // TODO: Fill in the space below with any helper methods that you think you will need

/*
package fracCalc;
import java.util.Arrays;
import java.util.Scanner;
public class FracCalc {

    public static void main(String[] args) 
    {
    	// TODO: Read the input from the user and call produceAnswer with an equation
    	System.out.println("Please input an expression");
        Scanner input= new Scanner(System.in);
        String userInput = input.nextLine();
        while (userInput.equals("quit")!=true){
        	String answer= produceAnswer(userInput);
        	System.out.println(answer);
        	//System.out.println(Arrays.toString(answer);
			
			
			System.out.println("please type next operation");
			userInput=input.nextLine();
		}
    	// TODO: Read the input from the user and call produceAnswer with an equation
    }
    /*
    
    */
    // ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
    // This function takes a String 'input' and produces the result
    //
    // input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
    //      e.g. input ==> "1/2 + 3/4"
    //        
    // The function should return the result of the fraction after it has been calculated
    //      e.g. return ==> "1_1/4"
    /*
    public static String produceAnswer(String input)
    { 
    	// TODO: Implement this function to produce the solution to the input
    	String[] splitspace= input.split(" ");
    	String operand1= splitspace[0];
    	String operator= splitspace[1];
    	String operand2= splitspace[2];
    	int[] answer= new int[2];
    	

    	int[] placeholder1= parseOperand(operand1);
    	int[] placeholder2= parseOperand(operand2);
    	
    	
    	
    	int[] frac1= toImproper(placeholder1);
    	int[] frac2= toImproper(placeholder2);
    	
    	if(operator.equals("+")){
    		addFraction(frac1, frac2);
    		answer= addFraction(frac1, frac2);
    	}
    	else if(operator.equals("-")){
    		subtFrac(frac1, frac2);
    		answer= subtFrac(frac1, frac2);
    	}
    	else if(operator.equals("*")){
    		multFrac(frac1, frac2);
    		answer= multFrac(frac1, frac2);
    	}
    	else{ 
    		divFrac(frac1, frac2);
    		answer= divFrac(frac1, frac2);
    	}
    	return (answer[0] + "/" + answer[1]);
    	
    }
    

    public static String toMixedNum (int []answer){
    	
    	int[] reducedadd= new int[2];
    	
    	int[] gcfaddnum= new int[1];
    	
    	
    	
    	
    	
    	
    }
    
    public static int[] divFrac(int[] frac1, int[] frac2){
    	int[] commonden=new int[1];
    	int[] numcombined= new int[1];
    	commonden[0]= frac1[1]*frac2[0];
    	numcombined[0]=frac1[0]*frac2[1];
    	int[] answer= new int[2];
    	answer[0]= numcombined[0];
    	answer[1]= commonden[0];
    	return answer;
    }
    public static int[] multFrac(int[] frac1, int[] frac2){
    	int[] commonden=new int[1];
    	int[] numcombined= new int[1];
    	commonden[0]=frac1[1]*frac2[1];
    	numcombined[0]= frac1[0]*frac2[0];
    	int[] answer= new int[2];
    	answer[0]= numcombined[0];
    	answer[1]= commonden[0];
    	return answer;
    }
    public static int[] subtFrac(int[] frac1, int[] frac2){
    	int[] commonden=new int [1];
    	int[] numcombined= new int[1];
    	if(frac1[1]==frac2[1]){
    		commonden[0]=frac1[1];
    		numcombined[0]= frac1[0]-frac2[0];
    	}else{
    		commonden[0]= frac1[1]*frac2[1];
    		numcombined[0]= (frac1[0]*frac2[1])-(frac2[0]*frac1[1]);
    	}
    	int[] answer= new int[2];
    	answer[0]= numcombined[0];
    	answer[1]= commonden[0];
    	
    	return answer;
    }
    
    public static int[] toImproper(int[] operand){
    	String improp;
    	
    	if(operand[0]<0){
    		improp= ((operand[0]*operand[2])+(operand[1]*-1)+"/"+operand[2]);
    		//improp=operand[2]*operand[0]-operand[1];
    	}
    	else{
    		improp=((operand[0]*operand[2])+(operand[1]) +"/" + operand[2]);
    	
    	/*
    	int[] improp= new int[2];
    	if(operand[0]>0){
    		improp[0]=operand[2]*operand[0]+operand[1];
    	}
    	if(operand[0]<0){
    		improp[0]= operand[2]*operand[0]-operand[1];
    	}
    	if(operand[0]==0){
    		improp[0]= operand[1];
    	}
    	improp[1]=operand[2];
    	return improp;
    	 	
        	
    }
    // TODO: Fill in the space below with any helper methods that you think you will need
    public static int[] addFraction(int [] frac1, int [] frac2){
    	int[] commonden= new int[1];
    	int[] numcombined= new int[1];
    	if(frac1[1]==frac2[1]){
    		commonden[0]=frac1[1];
    		numcombined[0]= frac1[0]+frac2[0];
    	}else{
    		commonden[0]=frac1[1]*frac2[1];
    		numcombined[0]= frac1[0]*frac2[1]+frac2[0]*frac1[1];
    		
    	}
    	int[] answer= new int[2];
    	answer[0]= numcombined[0];
    	answer[1]= commonden[0];
    	
    	return answer;
    }
    
    public static int[] parseOperand(String operand){
    	int[] compo= {0,0,1};
    	//whole num
    	int underscore= operand.indexOf("_");
    	int slash= operand.indexOf("/");
    	if(slash<0 && underscore<0){
    		compo[0]= Integer.parseInt(operand);
    		compo[1]= Integer.parseInt("0");
    		compo[2]= Integer.parseInt("1");
    	}
    	else if(slash>=1 && underscore<0){
    		compo[0]= Integer.parseInt("0");
    		compo[1]= Integer.parseInt(operand.substring(0, slash));
    		compo[2]= Integer.parseInt(operand.substring(slash+1, operand.length()));
    	}
    	else{
    		compo[0]= Integer.parseInt(operand.substring(0, underscore));
    		compo[1]= Integer.parseInt(operand.substring(underscore+1, slash));
    		compo[2]= Integer.parseInt(operand.substring(slash+1, operand.length()));
    	}
    	
    	
    	return compo;	
    	
    }
    	


*/













    
}






































       
        	
















        
    
























