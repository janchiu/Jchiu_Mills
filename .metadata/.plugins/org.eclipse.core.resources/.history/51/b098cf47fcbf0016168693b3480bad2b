package fracCalc;

import java.util.Scanner;
/*
public class FracCalc {

	

    public static void main(String[] args) 
    {
        // TODO: Read the input from the user and call produceAnswer with an equation
    		
    		Scanner newInput = new Scanner(System.in);
    		System.out.println("Please enter your input");
    		String input = newInput.nextLine();
    		if(input.equals("quit") != true){
    				String answer = produceAnswer(input);
    				System.out.println(answer);
    				System.out.println();
    				input = newInput.nextLine();
    		}
    		else {
    			newInput.close();
    		}
    	}

    // ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
    // This function takes a String 'input' and produces the result
    //
    // input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
    //      e.g. input ==> "1/2 + 3/4"
    //        
    // The function should return the result of the fraction after it has been calculated
    //      e.g. return ==> "1_1/4"
    public static String produceAnswer(String input)
    { 
        // TODO: Implement this function to produce the solution to the input
    	if(input.indexOf(' ') == -1){
    		return "incorrect input";
    	}
    	String [] splitTheSpaces = input.split(" ");
        // TODO: Implement this function to produce the solution to the input
    	
        String operator = splitTheSpaces[1];
        int [] firstPart = parseOperands(splitTheSpaces[0]);
        int [] secondPart = parseOperands(splitTheSpaces[2]);
        int[] resultFraction = new int[2];
        resultFraction = parseOperands(splitTheSpaces[0]);
        firstPart = toImproperFrac(firstPart);
      	secondPart = toImproperFrac(secondPart);
        
        if(operator.equals("+")){
        	resultFraction = addFrac((firstPart), (secondPart));
        } else 
        if(operator.equals("-"))
        	resultFraction = subtractFrac(firstPart, secondPart);
        else 
        if(operator.equals("*")) 
        	resultFraction = multiplyFrac(firstPart, secondPart);
         else
        if(operator.equals("/"))
        	resultFraction = divideFrac(firstPart, secondPart);
        else 
        	System.out.println("Please check if you have an operator");
        
        String answer;
        int[] reduceAnswer = reduceFrac(resultFraction);
        	if(reduceAnswer[0] == 0 && reduceAnswer[1] != 0) {
        		answer = reduceAnswer[1] + "/" + reduceAnswer[2];
    	}
    		else if (reduceAnswer[0] == 0 && reduceAnswer[0] ==0){
    			answer = "0";
    	} 
    		else if (reduceAnswer[1] == 0) {
    			answer = "" + reduceAnswer[1];
    	} else {
    		answer = reduceAnswer[0] + "_" + reduceAnswer[1] + "/" + reduceAnswer[2];
    	}
        	return answer;
        
    }
        
    
       String answer;
       int [] answerFrac =  reduceFrac(resultFraction);
     	if (answerFrac[0] == 0 && answerFrac[1] != 0) {
     		answer = answerFrac[1] + "/" + answerFrac[2];
     	}
     	else if (answerFrac[1] == 0) {
     		answer = "" + answerFrac[0];
     	}
     	else if (answerFrac[0] == 0 && answerFrac[0] == 0) {
     		answer = "0";
     	}
     	else {
     		answer = answerFrac[0] + "_" + answerFrac[1] + "/" + answerFrac[2];
     	}
        
        return answer;
             
      int locationfirst= input.indexOf(" ");
      
        int locationsecond= input.indexOf(" ", locationfirst+2);
        int[] array = input.split(" ");
        firstOperand= input.substring(0,locationfirst);
        secondOperand = input.substring(locationfirst+3);
        operator= input.substring(locationfirst+1, locationsecond);
        
        return partsImproper(secondOperand);
     
    public static String partsImproper(String secondOperand){
    	
    	int slash= secondOperand.indexOf("/");
    	int underscore= secondOperand.indexOf("_");
    	
    	String wholeNum;
    	String denominator;
    	String  numerator;
    	
    	
    	if(slash<0 && underscore<0){
    		wholeNum= secondOperand;
    		numerator= "0";
    		denominator= "1";
    	}
    	else if (slash>0 && underscore<0){
    		wholeNum= "0";
    		numerator = secondOperand.substring(0,slash);
    		denominator = secondOperand.substring(slash+1);
    		
    	}
    	
    	else {
    		wholeNum= secondOperand.substring(0,underscore);
    		numerator = secondOperand.substring(underscore+1,slash);
    		denominator = secondOperand.substring(slash+1);
    	}
    	return ("whole:"+wholeNum+" "+"numerator:"+numerator+" "+"denominator:"+denominator);
    	
    }
    
	
    public static int gcf(int[] answer){
		//This method finds the greatest common factor between two numbers using a loop to calculate whether those two numbers are
			//divisible by another number
		 
		int ans= 1;
		if(answer[0]>0 && answer[1]>0){
			for(int i=1; i<=answer[0] || i<=answer[1]; i++){
				if ((answer[0]% i== 0) && (answer[1]% i ==0)) {
					ans= i;
				}
			}
		}
		else{
			for(int i=-1;i>=answer[0] || i>=answer[1]; i--){
				if ((answer[0] % i == 0) && (answer[1]% i ==0)) {
					ans= i;
				}
			}
		}
		return ans;
	}
    
   
    public static int[] reduceFrac(int[] operand) {
    	
    	int [] simpleFrac = new int [3]; 
    	int wholeNum = operand[0]/operand[1];
    	operand[0] = (operand[0]%operand[1]);
    	if (wholeNum != 0) {
    	operand[0] = Math.abs(operand[0]);
    	}
   
    	int factor = gcf(operand);
    	int numerator = operand[0]/factor;
    	int denominator = Math.abs(operand[1]/factor); 
    			simpleFrac[0] = wholeNum; 
    			simpleFrac[1] = numerator;
    			simpleFrac[2] = denominator; 
    		return simpleFrac; 

    }
    	
    public static int[] parseOperands(String operand){
		String[] threePartsOfArray = new String[3]; 
		String underscore = "_";
		String slash = "/";
		if(operand.indexOf(underscore)>0 && operand.indexOf(slash)>0) { // checks if there is an underscore 

			threePartsOfArray[0] = operand.substring(0, operand.indexOf(underscore));
			threePartsOfArray[1] = operand.substring(operand.indexOf(slash)+1, operand.indexOf(slash));
			threePartsOfArray[2] = operand.substring(operand.indexOf(operand.indexOf(slash)));
		} else 
		if(operand.indexOf(underscore) < 0 && operand.indexOf(slash) >0){
			threePartsOfArray[0] = "0";
			threePartsOfArray[1] = operand.substring(operand.indexOf(underscore)+1, operand.indexOf(slash));
			threePartsOfArray[2] = operand.substring(operand.indexOf(slash)+1);
		} else 
		if(operand.indexOf(underscore)<0 && operand.indexOf(slash)<0) {
			threePartsOfArray[0] = operand;
			threePartsOfArray[1] = "0";
			threePartsOfArray[2] = "1";
		}
		int[] parseTheOperand = new int[3];
		for(int i = 0; i <3; i++) {
			parseTheOperand[i] = Integer.parseInt(threePartsOfArray[i]);
		}
		return parseTheOperand;
    }

	String[] answer;
        String operator;
        String operand1; 
        String operand2;

        for(int i = 1; i < )
        if (operand.indexOf("+")!= -1){
            answer = operand.split("+");
            operator = "+";
            answer[0] = operand1;
            answer[1] = operand2;
            if (operand1.indexOf(underscore) > 0) {
            	String[] parseWholeFrac = operand1.split("_");
            	String wholeNumber = parseWholeFrac[0];
            	String fraction = parseWholeFrac[1];
            	
            	String[] numberAndDenominator = fraction.split("/");
            	
        } 
        if (operand.indexOf("-") != -1) {
            answer = operand.split("-"); 
            operator = "-";
        } 
        if (operand.indexOf("*") != -1) {
            answer = operand.split("*");
            operator = "*";
        }
        if (operand.indexOf("/") != -1) // fix 
            answer = operand.split("/");
        	operator = "/";
    	}
        
        String[] operands = answer;
        operands[1] = operator;
        operands[0] = operand1; 
        operands[2] = operand2; 
      
        String[] firstOperand;
        if(operand1[0].indexOf(slash) > 0 && operand1[0].indexOf(underscore) > 0) {
            firstOperand = operand1[0].split("/");
            firstOperand = operand1[0].split("_");
        }
        if(operand1[0].indexOf(slash) > 0 && operand1[0].indexOf(underscore) < 0) {
            firstOperand = operand1[0].split(slash);
        }
	}
	
	
    
    public static int[] toImproperFrac(int[] operand) { // This method converts mixed number into an improper fraction //
    	int[] improp = new int[2]; 
    	
    	if(operand[0]<0){
    		improp[0] = (operand[0]*operand[2])-operand[1];
    		improp[1] = (operand[2]);	
    	}
    	else {
    		improp[0] = ((operand[0]*operand[2])+operand[1]);
    		improp[1] = (operand[2]);
    	}
    	return improp;
    }
    
	public static int[] addFrac(int[] firstOperand, int[] secondOperand){
		int[] answer = new int[2]; 
		int[] array = new int[2];
		array[0] = (firstOperand[0]*secondOperand[1]) + (firstOperand[1]*secondOperand[0]);
		answer[0] = array[0];
		answer[1] = firstOperand[1]*secondOperand[1];
		return answer;
	}

    public static int[] subtractFrac(int[] firstOperand, int[] secondOperand) {
    	int[] answer = new int[2]; 
    	int[] array = new int[2]; 
		array[0] = (firstOperand[0]*secondOperand[1])- (firstOperand[1]*secondOperand[0]);	
		answer[0] = array[0];
		answer[1] = firstOperand[1]*secondOperand[1];
		return answer;
	}
    
    public static int[] multiplyFrac(int[] firstOperand, int[] secondOperand) {
    	int[] answer = new int[2]; 
    		answer[0] = (firstOperand[0] * secondOperand[0]);
    		answer[1] = (firstOperand[1] * secondOperand[1]); 
    		return answer;
    	}
    	
    public static int[] divideFrac (int[] firstOperand, int[] secondOperand) {
    	int[] newOperand = new int[2]; 
    	int numerator = firstOperand[0] * secondOperand[1];
    	int denominator = firstOperand[1]* secondOperand[0]; 
		newOperand[0] = numerator;
    	newOperand[1] = denominator;
    		return newOperand;
    	}
    // TODO: Fill in the space below with any helper methods that you think you will need
}
*/
public class FracCalc {

	public static void main(String[] args) {
		// TODO: Read the input from the user and call produceAnswer with an
		// equation

		Scanner scanner = new Scanner(System.in);
		String input = scanner.nextLine();
		while (input != "quit") {

			String answer = produceAnswer(input);
			System.out.println("\n");
			System.out.println(answer);
			input = scanner.nextLine();
		}
		System.exit(0);

	}

	// ** IMPORTANT ** DO NOT DELETE THIS FUNCTION. This function will be used
	// to test your code
	// This function takes a String 'input' and produces the result
	//
	// input is a fraction string that needs to be evaluated. For your program,
	// this will be the user input.
	// e.g. input ==> "1/2 + 3/4"
	//
	// The function should return the result of the fraction after it has been
	// calculated
	// e.g. return ==> "1_1/4"
	public static String produceAnswer(String input) {
		// TODO: Implement this function to produce the solution to the input
		String[] parsedExpression = input.split(" ");
		int[] operand1 = new int[3];
		int[] operand2 = new int[3];
		operand1 = parseOperand(parsedExpression[0]);
		operand2 = parseOperand(parsedExpression[2]);
		String sResult = "";
		int[] result = new int[3];
		//call addFrac, subtractFrac, multiplyFrac, and divideFrac
		
		if(parsedExpression[1].trim().indexOf("+") >=0){
		
			result= addFrac(operand1, operand2);
		}
		if(parsedExpression[1].trim().indexOf("-") >=0){
		    result = subtractFrac(operand1, operand2);
		}
		if(parsedExpression[1].trim().indexOf("*") >=0){
			result = multiplyFrac(operand1, operand2);
		}if(parsedExpression[1].trim().indexOf("/") >=0){
			result = divideFrac(operand1, operand2);
		}
		if (result.length > 1)
			sResult = result[0] + "_" + result[1] + "/" + result[2];
	    if (result[1]==0){ 
		 sResult = result[0] + "";}
		//call toMixedNum
		//toMixedNum();
		//return answer
 

		// System.out.println(operation[2]);

		String s1 = parsedExpression[0];
		String s2 = parsedExpression[2];

		return sResult;
		

	}

	public static int[] parseOperand(String num) {
		int[] number = new int[3];
		if (num.indexOf("_") > 0) {
			String[] parseNumber = num.split("_");
			String whole = parseNumber[0];
			String fraction = parseNumber[1];

			String[] numDen = fraction.split("/");
			String numerator = numDen[0];
			String denominator = numDen[1];
			number[0] = Integer.parseInt(whole);
			number[1] = Integer.parseInt(numerator);
			number[2] = Integer.parseInt(denominator);
			

		} else if (num.indexOf("/") > 0) {
			String[] numeratorSplit = num.split("/");
			String numerator = numeratorSplit[0];
			String denominator = numeratorSplit[1];

			System.out.print("whole: 0");
			System.out.print(" numerator:" + numerator);
			System.out.println(" denominator:" + denominator);
			number[0] = 1;
			number[1] = Integer.parseInt(numerator);
			number[2] = Integer.parseInt(denominator);
		} else {
			System.out.println("whole:" + num + " numerator:0 denominator:0");
			number[0] = Integer.parseInt(num);
			number[1] = 0;
			number[2] = 0;
		}

		// System.out.println("Answer"+result);
		return  number;
	}

	// try to make something so that it will make sure the denominators are the
	// same
	// if operand1 and operand2 do not have a common denominator, multiply the two fractions
	// together to get the GCF.
	public static int[] addFrac(int[] operand1, int[] operand2) {
		int numerator1 = operand1[1] * operand2[2];
		int numerator2 = operand1[2] * operand2[1];
		//get the common denominator
		int commonDenom = operand1[2] * operand2[2];
		//add the numerator, keep the denominator
		int commonNumerator = numerator1 + numerator2;
		
		int[] answer = new int[3];
		answer[0]= commonNumerator/commonDenom;
		if (commonNumerator%commonDenom != 0){
			answer[1]= commonNumerator%commonDenom;
			answer[2]=commonDenom;
		} 
		return answer;
	}

	public static int[] subtractFrac(int[] operand1, int[] operand2) {
		//change the sign of the second numerator
		operand2[0] = operand2[0] * (-1);
		//call addFrac
		int[] answer = new int[2];
		answer= addFrac (operand1, operand2);
		return answer;
		
		
	}

	public static int[] multiplyFrac(int[] operand1, int[] operand2) {
		// multiply both the fractions together
		int commonNumerator = operand1[1] * operand2[1];
		int commonDenom = operand1[2] * operand2[2];
		int result = commonNumerator/commonDenom;
		int[] answer = new int[3];
		if (commonNumerator>commonDenom){
			answer[0] = result;
			answer[1] = commonNumerator%commonDenom;
			answer[2] = commonDenom;
		}else{ 
			answer[0] = 1;
			answer[1] = commonNumerator;
			answer[2] = commonDenom;
		}
		return answer;
	}

	public static int[] divideFrac(int[] operand1, int[] operand2) {
		// flip the second fraction over
		// multiply the two fractions together
		int temp = operand2[0];
		operand2[0] = operand2[1];
		operand2[1] = temp;
		int[] result = multiplyFrac(operand1, operand2);
		return result;
		
	}
}
    